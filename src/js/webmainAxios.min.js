/*
 * @Author: lixuefeng
 * @Date:   2019-07-15 11:27:25
 * @Last Modified by:   A
 * @Last Modified time: 2022-02-26 15:36:14
 * @File_path:  E:\0_job_progect\20200101_huaer\gulpfile_xiaochu\app\js\webmain$Axios.js
 */

import $ from 'jquery'
import Swiper from 'swiper'
const axios = require('axios').default;

import { dialog } from './common'
import { layer } from '../bower_components/layer/dist/layer'

import './TweenMax.min'

/*========================Axios====================*/
//当创建实例的时候配置默认配置
var instance = axios.create({
    method: 'post',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    //transformRequest是你在data传输前进行数据处理，如果不处理你的数据会显示object.object
    transformRequest: [function (data) {
        // 对 data 进行任意转换处理
        let ret = '';
        for (let it in data) {
            ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&';
        };
        return ret;
    }]
});

// 添加请求拦截器
instance.interceptors.request.use(function (config) {
    // 在发送请求之前做些什么
    var index = layer.load(2, {
        shade: [0.1, '#fff'] //0.1透明度的白色背景
    });
    return config;
}, function (error) {
    // 对请求错误做些什么
    return Promise.reject(error);
});

// 添加响应拦截器
instance.interceptors.response.use(function (response) {
    // 对响应数据做点什么
    layer.closeAll();
    return response;
}, function (error) {
    // 对响应错误做点什么
    return Promise.reject(error);
});
/* ======================= $axios end ======================= **/


var Projet_Global_Parameter = {
    // 重复点击开关
    bOff: true, // 自定义开关 布尔值
    bEmail: null, // 是否是一个邮箱 布尔值
    upData: null, // url中返回的携带的参数
    aUrlData: [], // 存储url中返回的参数数组
    user_from_uid: '', // 分享参数
    upImgApi: '',
    // 补0操作 如果数字为3，则输出0003，不够位数就在之前补足0，
    PrefixInteger: function (num, length) {
        return ("0000000000000000" + num).substr(-length);
    },
    /**
     * 时间戳格式化函数
     * @param  {string} format    格式
     * @param  {int}    timestamp 要格式化的时间 默认为当前时间
     * @return {string}           格式化的时间字符串
     */
    date: function (format, timestamp) {
        var a, jsdate = ((timestamp) ? new Date(timestamp * 1000) : new Date());
        var pad = function (n, c) {
            if ((n = n + "").length < c) {
                return new Array(++c - n.length).join("0") + n;
            } else {
                return n;
            }
        };
        var txt_weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        var txt_ordin = {
            1: "st",
            2: "nd",
            3: "rd",
            21: "st",
            22: "nd",
            23: "rd",
            31: "st"
        };
        var txt_months = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var f = {
            // Day
            d: function () {
                return pad(f.j(), 2)
            },
            D: function () {
                return f.l().substr(0, 3)
            },
            j: function () {
                return jsdate.getDate()
            },
            l: function () {
                return txt_weekdays[f.w()]
            },
            N: function () {
                return f.w() + 1
            },
            S: function () {
                return txt_ordin[f.j()] ? txt_ordin[f.j()] : 'th'
            },
            w: function () {
                return jsdate.getDay()
            },
            z: function () {
                return (jsdate - new Date(jsdate.getFullYear() + "/1/1")) / 864e5 >> 0
            },

            // Week
            W: function () {
                var a = f.z(),
                    b = 364 + f.L() - a;
                var nd2, nd = (new Date(jsdate.getFullYear() + "/1/1").getDay() || 7) - 1;
                if (b <= 2 && ((jsdate.getDay() || 7) - 1) <= 2 - b) {
                    return 1;
                } else {
                    if (a <= 2 && nd >= 4 && a >= (6 - nd)) {
                        nd2 = new Date(jsdate.getFullYear() - 1 + "/12/31");
                        return date("W", Math.round(nd2.getTime() / 1000));
                    } else {
                        return (1 + (nd <= 3 ? ((a + nd) / 7) : (a - (7 - nd)) / 7) >> 0);
                    }
                }
            },

            // Month
            F: function () {
                return txt_months[f.n()]
            },
            m: function () {
                return pad(f.n(), 2)
            },
            M: function () {
                return f.F().substr(0, 3)
            },
            n: function () {
                return jsdate.getMonth() + 1
            },
            t: function () {
                var n;
                if ((n = jsdate.getMonth() + 1) == 2) {
                    return 28 + f.L();
                } else {
                    if (n & 1 && n < 8 || !(n & 1) && n > 7) {
                        return 31;
                    } else {
                        return 30;
                    }
                }
            },

            // Year
            L: function () {
                var y = f.Y();
                return (!(y & 3) && (y % 1e2 || !(y % 4e2))) ? 1 : 0
            },
            //o not supported yet
            Y: function () {
                return jsdate.getFullYear()
            },
            y: function () {
                return (jsdate.getFullYear() + "").slice(2)
            },

            // Time
            a: function () {
                return jsdate.getHours() > 11 ? "pm" : "am"
            },
            A: function () {
                return f.a().toUpperCase()
            },
            B: function () {
                // peter paul koch:
                var off = (jsdate.getTimezoneOffset() + 60) * 60;
                var theSeconds = (jsdate.getHours() * 3600) + (jsdate.getMinutes() * 60) + jsdate.getSeconds() + off;
                var beat = Math.floor(theSeconds / 86.4);
                if (beat > 1000) beat -= 1000;
                if (beat < 0) beat += 1000;
                if ((String(beat)).length == 1) beat = "00" + beat;
                if ((String(beat)).length == 2) beat = "0" + beat;
                return beat;
            },
            g: function () {
                return jsdate.getHours() % 12 || 12
            },
            G: function () {
                return jsdate.getHours()
            },
            h: function () {
                return pad(f.g(), 2)
            },
            H: function () {
                return pad(jsdate.getHours(), 2)
            },
            i: function () {
                return pad(jsdate.getMinutes(), 2)
            },
            s: function () {
                return pad(jsdate.getSeconds(), 2)
            },
            //u not supported yet

            // Timezone
            //e not supported yet
            //I not supported yet
            O: function () {
                var t = pad(Math.abs(jsdate.getTimezoneOffset() / 60 * 100), 4);
                if (jsdate.getTimezoneOffset() > 0) t = "-" + t;
                else t = "+" + t;
                return t;
            },
            P: function () {
                var O = f.O();
                return (O.substr(0, 3) + ":" + O.substr(3, 2))
            },
            //T not supported yet
            //Z not supported yet

            // Full Date/Time
            c: function () {
                return f.Y() + "-" + f.m() + "-" + f.d() + "T" + f.h() + ":" + f.i() + ":" + f.s() + f.P()
            },
            //r not supported yet
            U: function () {
                return Math.round(jsdate.getTime() / 1000)
            }
        };

        return format.replace(/[\\]?([a-zA-Z])/g, function (t, s) {
            if (t != s) {
                // escaped
                ret = s;
            } else if (f[s]) {
                // a date function exists
                ret = f[s]();
            } else {
                // nothing special
                ret = s;
            }
            return ret;
        });
    },
    // 返回当前日期精确到秒
    getDay: function () {
        let year = new Date().getFullYear();
        let month = new Date().getMonth() + 1;
        let day = new Date().getDate();
        let hours = new Date().getHours();
        let mm = new Date().getMinutes();
        let ss = new Date().getSeconds();


        if (month > 0 && month < 10) {
            month = '0' + month;
        }

        if (day > 0 && day < 10) {
            day = '0' + day;
        }

        if (hours > 0 && hours < 10) {
            hours = '0' + hours;
        }

        if (mm > 0 && mm < 10) {
            mm = '0' + mm;
        }
        if (ss > 0 && ss < 10) {
            ss = '0' + ss;
        }

        // myDate = year + '' + month + '' + day + '' + hours+''+mm+''+ss;
        // console.log(year + '' + month + '' + day + '' + hours+''+mm+''+ss)

        return year + '' + month + '' + day + '' + hours + '' + mm + '' + ss;
    },
    // 获取返回链接的参数对象
    getUrlData: function () {
        url = window.location.href; //获取当前页面的url
        // console.log(url)
        if (url.indexOf('?uid') == -1) {
            arr = url;
            // console.log('没找到');
        } else {
            arr = url.split("?")[1].split("&");
            // console.log('找到了');
            var enUrl = decodeURI(url); //解码
            var len = enUrl.length; //获取url的长度值
            var a = enUrl.indexOf("?"); //获取第一次出现？的位置下标
            var b = enUrl.substr(a + 1, len); //截取问号之后的内容
            var c = b.split("&"); //从指定的地方将字符串分割成字符串数组
            var arr = new Array(); //新建一个数组
            for (var i = 0; i < c.length; i++) {
                var d = c[i].split("=")[1]; //从=处将字符串分割成字符串数组,并选择第2个元素
                arr.push(d); //将获取的元素存入到数组中
            }

            return arr;
        }
    },
    resGetUrlData: function () {
        // 浏览器参数,返回数组
        Projet_Global_Parameter.aUrlData = Projet_Global_Parameter.getUrlData();
        if (Projet_Global_Parameter.aUrlData) {
            if (Projet_Global_Parameter.aUrlData[0]) {
                if (typeof (Projet_Global_Parameter.aUrlData[0]) == undefined) {
                    console.log('没有参数啥也不干');
                    Projet_Global_Parameter.upData = '';
                } else {
                    Projet_Global_Parameter.upData = Projet_Global_Parameter.aUrlData[0];
                    console.log('看见参数了' + Projet_Global_Parameter.upData)
                }
            }
        };
    },
    // 复制粘贴功能
    tapCopy: function ($id) {
        Projet_Global_Parameter.selectText($id);
        document.execCommand('copy');
    },
    //选中文本
    selectText: function (element) {
        var text = document.getElementById(element);
        //做下兼容
        if (document.body.createTextRange) { //如果支持
            var range = document.body.createTextRange(); //获取range
            range.moveToElementText(text); //光标移上去
            range.select(); //选择
        } else if (window.getSelection) {
            var selection = window.getSelection(); //获取selection
            var range = document.createRange(); //创建range
            range.selectNodeContents(text); //选择节点内容
            selection.removeAllRanges(); //移除所有range
            selection.addRange(range); //添加range
            /*if(selection.setBaseAndExtent){
             selection.setBaseAndExtent(text, 0, text, 1);
             }*/
        } else {
            layer.msg('请稍后再试');
        }
    },
    // 校验邮箱
    isEmail: function (strEmail) {
        if (strEmail.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1) {
            return true;
        } else {
            return false;
        }
    },
    // 获取预约人数
    getBindPerson: async function () {
        var res = await instance.post('http://grayraven.jp/yuyue/count');
        if (res.data.code == 0) {
            // res.data.data.num  = '4999199';
            // 动态创建预约人数
            Projet_Global_Parameter.createPersonNum(("000000" + res.data.data.num).substr(-6));
        } else {
            Projet_Global_Parameter.createPersonNum('000000');
        }
    },
    // 获取图片上传接口
    getImageApi: async function () {
        var res = await instance.get('https://grayraven.jp/commonMethod/get-image-api.html');
        // console.log(res.data);
        if (res.data.status == 0) {
            Projet_Global_Parameter.upImgApi = res.data.msg
            // console.log(Projet_Global_Parameter.upImgApi)
        }
    },
    // 模拟uid登陆
    uidLogin: async function (uid) {
        if (Projet_Global_Parameter.bOff) {
            var res = await instance.get('/pre/login', {
                params: {
                    uid: uid
                },
            });
            console.log(res.data)
            if (res.data.code == 0) {
                // layer.msg('登录成功');
                layer.msg('ログイン完了');

                dialog.closeDiv();

                // 获取用户信息
                setTimeout(function () {
                    Projet_Global_Parameter.getUserInfo();
                }, 1500)
            }
        }
    },
    // 模拟登录
    testLogin: async function () {
        var res = await instance.get('/firn-night/test-login');
        // console.log(res);
    },
    // 获取用户信息
    getUserInfo: async function () {
        var res = await instance.post('/firn-night/get-user-info');
        const resData = res.data.data;

        console.log(resData)

        if (res.data.code == 0) {

            // 登陆状态
            sessionStorage.setItem('sess-isLogin', JSON.stringify(true));
            // fb 昵称
            sessionStorage.setItem('sess-nickname', JSON.stringify(res.data.data.user_info.nickname));
            // 分享状态
            sessionStorage.setItem('sess-isBind', JSON.stringify(res.data.data.user_info.today_is_share));
            // 当前位置
            sessionStorage.setItem('sess-current-serial', JSON.stringify(res.data.data.user_info.current_serial));
            // 剩余次数
            sessionStorage.setItem('sess-left-num', JSON.stringify(res.data.data.user_info.left_num));
            // 选择支援id
            sessionStorage.setItem('sess-partner-id', JSON.stringify(res.data.data.user_info.partner_id));

            $('.botbar-leftNum span').text(res.data.data.user_info.left_num);

            // 如果未开始或者曲未移动 弹出【起点】
            if (res.data.data.user_info.current_serial == 0) {
                dialog.alertPop_a();
            }
            // 是否选择支援 -- hooks处理
            if (res.data.data.user_info.current_serial >= 16 && res.data.data.user_info.partner_id == 0) {
                // 灰鸦小队支援  剧情4
                dialog.alertPop_grayravenTeam('루시아(여명)', '리브(유광)', '리(이화)');
            }
            // 救出伊凡 隐藏书籍
            if (res.data.data.user_info.current_serial >= 21) {
                $('.book').hide();
            }

            for (let map_index = 0; map_index < res.data.data.user_info.current_serial; map_index++) {
                $(`.route .route-v${map_index}`).addClass('curr');
            }

            // 获取曲的位置
            $('#qu').removeClass().addClass(`hero plan-a step${res.data.data.user_info.current_serial}`);

        } else {
            // 登陆状态
            sessionStorage.setItem('sess-isLogin', JSON.stringify(false));
        }
    },
    // 前进位置数组
    aGoPositionXY: [{
        x: '.6rem',
        y: '1.35rem'
    }, {
        x: '1.3rem',
        y: '2rem'
    }, {
        x: ' 1.8rem',
        y: '3.7rem'
    }, {
        x: '2.7rem',
        y: '4.7rem'
    }, {
        x: '3.45rem',
        y: '3.35rem'
    }, {
        x: '3.15rem',
        y: '1.3rem'
    }, {
        x: '4.55rem',
        y: '0.3rem'
    }, {
        x: '5.2rem',
        y: '1.9rem'
    }, {
        x: '5.55rem',
        y: '4.15rem'
    }, {
        x: '6.85rem',
        y: '3.65rem'
    }, {
        x: '7rem',
        y: '1.65rem'
    }, {
        x: '8.1rem',
        y: '0.5rem'
    }, {
        x: '9rem',
        y: '2.1rem'
    }, {
        x: '8.9rem',
        y: '4.25rem'
    }, {
        x: '10.3rem',
        y: '4.3rem'
    }, {
        x: '10.9rem',
        y: '2.15rem'
    }, {
        x: '11.75rem',
        y: '0.25rem'
    }, {
        x: '12.75rem',
        y: '1.45rem'
    }, {
        x: '12.75rem',
        y: '4.1rem'
    }, {
        x: '14.05rem',
        y: '4.3rem'
    }, {
        x: '14.35rem',
        y: '2.6rem'
    }, {
        x: '15.2rem',
        y: '0.5rem'
    }, {
        x: '16.5rem',
        y: '1.2rem'
    }, {
        x: '16.65rem',
        y: '3.6rem'
    }, {
        x: '18rem',
        y: '4rem'
    }, {
        x: '18.6rem',
        y: '1.6rem'
    }],
    // 曲 前进
    move: async function () {
        var res = await instance.post('/firn-night/move');
        const resData = res.data.data;

        // 获取曲的位置 
        let oEleLeft = $('#qu').position().left;
        let oEleTop = $('#qu').position().top;

        // console.log(resData)
        // console.log("oEleLeft" + oEleLeft)
        // console.log("oEleTop" + oEleTop)
        if (res.data.code == 0) {
            $('.botbar-leftNum span').text(resData.user_info.left_num);
            // console.log('resData.current_serial==' + resData.user_info.current_serial);
            let goLeft = Projet_Global_Parameter.aGoPositionXY[resData.user_info.current_serial].y;
            let goTop = Projet_Global_Parameter.aGoPositionXY[resData.user_info.current_serial].x;

            // console.log("goLeft" + goLeft)
            // console.log("goTop" + goTop)

            var tl = new TimelineMax({ onComplete: Projet_Global_Parameter.moveCallback, onCompleteParams: [resData.user_info.current_serial] });

            // 从当前位置 去到 下一个位置
            tl.fromTo('#qu', 1, { left: oEleLeft, top: oEleTop }, { left: goLeft, top: goTop });
        }
        if (res.data.code == 201) {
            // layer.msg('前进次数不足!');
            layer.msg('1일 전진 횟수를 모두 사용했습니다. 내일 다시 시도해 주세요.');
        }

        if (res.data.code == 202) {
            layer.msg('已到达终点!');
        }

        if (res.data.code == 2001) {
            // layer.msg('活动已结束，请在记录处确认兑换码!');
            layer.msg('이벤트 종료, 기록에서 교환코드를 확인하세요.');
        }
        if (res.data.code == 2002) {
            // layer.msg('活动已结束，请在记录处确认兑换码!');
            layer.msg('이벤트 종료, 기록에서 교환코드를 확인하세요.');
        }
    },
    // 曲前进完毕后的回调
    moveCallback: function (stepNumber) {
        // 移动后从新计算荷叶状态
        for (let map_index = 0; map_index < stepNumber; map_index++) {
            $(`.route .route-v${map_index}`).addClass('curr');
        }

        // 荷叶动画 // 加波纹
        $(`.route .route-v${stepNumber}`).addClass('bowen');
        let oNowTop = $(`.route .route-v${stepNumber}`).position().top;

        var t2 = new TimelineLite({ repeat: -1, yoyo: true });

        t2.fromTo($(`.route .bowen.route-v${stepNumber}`), 0.5, { top: oNowTop }, { top: oNowTop + 10 });

        setTimeout(() => {
            $(`.route .route-v${stepNumber}`).removeClass('bowen');

            if (stepNumber == 1) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 2) {
                // 答题挑战
                Projet_Global_Parameter.getQuestion('1');
            }
            if (stepNumber == 3) {
                // 无事发生3
                dialog.alertPop_b();
            }
            if (stepNumber == 4) {
                // 守林人营地 剧情1
                // 弹出【守林人营地】，点击中间的按钮【获取】，弹出【获得奖励】，点击【红色按钮】转到【补给记录】，点击【黄色按钮】关闭弹窗
                dialog.alertPop_c();
            }
            if (stepNumber == 5) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 6) {
                // 答题挑战
                Projet_Global_Parameter.getQuestion('2');
            }
            if (stepNumber == 7) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 8) {
                // 遗留物资  剧情2
                dialog.alertPop_d();
            }
            if (stepNumber == 9) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 10) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 11) {
                // 答题挑战
                Projet_Global_Parameter.getQuestion('3');
            }
            if (stepNumber == 12) {
                // 空中花园补给箱  剧情3
                dialog.alertPop_e();
            }
            if (stepNumber == 13) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 14) {
                // 答题挑战
                Projet_Global_Parameter.getQuestion('4');
            }
            if (stepNumber == 15) {
                // 无事发生15
                dialog.alertPop_nothing('곡은 날렵하게 침식체의 공격을 피했습니다.', '../images/pop/plan-nothing-pic15.png');
            }
            if (stepNumber == 16) {
                // 灰鸦小队支援  剧情4
                dialog.alertPop_grayravenTeam('루시아(여명)', '리브(유광)', '리(이화)');
            }
            if (stepNumber == 17) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 18) {
                // 遗留物资  剧情5
                dialog.alertPop_f();
            }
            if (stepNumber == 19) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 20) {
                // 答题挑战
                Projet_Global_Parameter.getQuestion('5');
            }
            // 获得书籍 变换形态
            if (stepNumber == 21) {
                // 救出伊凡 剧情6
                $('#qu').removeClass('plan-a').addClass('plan-b');
                dialog.alertPop_help();
                $('.book').hide();
            }
            if (stepNumber == 22) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 23) {
                // 答题挑战
                Projet_Global_Parameter.getQuestion('6');
            }
            if (stepNumber == 24) {
                // 无事发生
                dialog.alertPop_nothing();
            }
            if (stepNumber == 25) {
                Projet_Global_Parameter.getUserInfo();
                // 摩尔曼斯克港 剧情7（终点）
                dialog.alertPop_over();
            }
        }, 1500);
        console.log('动画结束!');
    },
    // 获取题目
    getQuestion: async function (id) {
        var res = await instance.post('/firn-night/get-question', {
            question_id: id
        });
        const resData = res.data.data;
        console.log(resData);
        if (res.data.code == 0) {
            dialog.alertPop_lott(resData.title, resData.answer_a, resData.answer_b, resData.answer_b, resData.id);
        } else {
            console.log('获取题目失败!');
        }
    },
    // 答题
    answer: async function (id, answer) {
        var res = await instance.post('/firn-night/answer', {
            question_id: id,
            answer: answer
        });

        console.log(res.data);

        if (res.data.code == 0) {
            // 回答正确
            dialog.alertPop_lott_victory();

            let iNowNum = parseInt($('.botbar-leftNum span').text());
            $('.botbar-leftNum span').text(iNowNum + 1);
        } else if (res.data.code == 206) {
            // 回答错误
            dialog.alertPop_lott_error();
        } else if (res.data.code == 205) {
            // 已经回答过了
            layer.msg('已经回答过了');
        } else if (res.data.code == 204) {
            // 答案不符合规范
            layer.msg('여러번 누르지 마세요.');
        } else {
            // 操作过于频繁，请稍后再试
            layer.msg('여러번 누르지 마세요.');
        }
    },
    // 选择支援
    choosePartner: async function (pid) {
        var res = await instance.post('/firn-night/choose-partner', {
            partner_id: pid
        });
        const resData = res.data.data;
        console.log(resData);
        let url = '', txt = '';
        if (pid == 1) {
            url = '../images/pop/plan-lxy.png';
            txt = '루시아· 여명이 지원합니다';
        }
        if (pid == 2) {
            url = '../images/pop/plan-lm.png';
            txt = '리브· 유광이 지원합니다';
        }
        if (pid == 3) {
            url = '../images/pop/plan-li.png';
            txt = '리· 이화가 지원합니다';
        }
        if (res.data.code == 0) {
            // 灰鸦小队支援-成功
            dialog.alertPop_grayraven_reward(url, txt);
        } else if (res.data.code == 213) {
            layer.msg('还未达到成员选择的条件');
        } else {
            console.log('支援失败');
        }
    },
    // 获取领奖记录
    getDrawLog: async function () {
        var res = await instance.post('/firn-night/get-draw-log');
        const resData = res.data.data;

        console.log(resData)

        if (res.data.code == 0) {
            if (resData.length == 0) {
                // layer.msg('暂无奖励!');
                layer.msg('획득한 보상이 없습니다.');
            } else {
                dialog.alertPop_mylott(resData);
            }
        }
    },
    // fb分享
    fbShare: function () {
        try {
            FB.ui({
                method: "share",
                href: "https://grayraven.kr/lostchapter/index.html"
            },
                function (response) {
                    if (response) {
                        instance.post('/firn-night/share').then(function (res) {
                            console.log(res.data)
                            if (res.data.code == 0) {
                                sess_isShare = sessionStorage.getItem('today_is_share');
                                if (JSON.parse(sess_isShare) == 0) {
                                    // 分享成功
                                    layer.msg('전진 횟수 1회 추가');
                                } else {
                                    layer.msg('공유 성공!');
                                }
                                sessionStorage.setItem('today_is_share', JSON.stringify(1));
                                setTimeout(() => {
                                    // 获取用户信息
                                    Projet_Global_Parameter.getUserInfo();
                                }, 1000);
                            }
                        }).catch(function (error) {
                            console.log(error);
                        });

                    } else {
                        layer.msg('공유 실패, 다시 시도해 주세요.');
                    }
                }
            );
        } catch (err) {
            layer.msg('공유 실패, 다시 시도해 주세요.!');
        }
    },
    // 分享回调
    sim_Share: function () {
        instance.post('/eden/share').then(function (res) {
            console.log(res.data)
            if (res.data.code == 0) {
                // 分享状态
                sessionStorage.setItem('sess-isShare', JSON.stringify(res.data.data.user_info.today_is_shared));

                let aLink = document.createElement('a');
                let evt = document.createEvent("HTMLEvents");
                evt.initEvent("click", true, true);
                aLink.setAttribute("target", "_blank");
                aLink.href = 'https://twitter.com/intent/tweet?text=%E2%9C%A8%23%E3%82%A8%E3%83%87%E3%83%B3%E6%96%87%E5%8C%96%E7%A5%AD%20%E6%8A%95%E7%A8%BF%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E9%96%8B%E5%82%AC%E4%B8%AD%E2%9C%A8 %23%E3%83%91%E3%83%8B%E3%82%B0%E3%83%AC%20%E3%82%92%E3%83%86%E3%83%BC%E3%83%9E%E3%81%AB%E3%80%8C%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%80%8D%E3%81%A8%E3%80%8C%E5%8B%95%E7%94%BB%E3%80%8D%E3%81%AE%EF%BC%92%E9%83%A8%E9%96%80%E3%81%A7%E4%BD%9C%E5%93%81%E5%8B%9F%E9%9B%86%E4%B8%AD%EF%BC%81 iPhone%2013%20Pro%E3%82%84iPad%20Pro%E3%80%81AirPods%20Pro%E3%81%AA%E3%81%A9 %E8%B1%AA%E8%8F%AF%E8%B3%9E%E5%93%81%E3%81%8C%E5%BD%93%E3%81%9F%E3%82%8B%E3%83%81%E3%83%A3%E3%83%B3%E3%82%B9%EF%BC%81 %E8%A9%B3%E7%B4%B0%E3%81%AF%E7%89%B9%E8%A8%AD%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%EF%BC%81 &url=https://grayraven.jp/fanartcontest/m/index.html';
                aLink.click();

                // sess_isShare = sessionStorage.getItem('sess-isShare');
                // if (JSON.parse(sess_isShare) == 0) {
                //     // 分享成功
                //     layer.msg('挑戦回数が1回追加されました！',{time: 5000});
                // } else {
                //     layer.msg('已经分享过了,シェア成功！', {
                //         time: 5000,
                //         offset: 't',
                //         anim: 1
                //     });
                //     console.log('已经分享过了,シェア成功！')
                // }
                Projet_Global_Parameter.getUserInfo();
            } else {
                layer.msg('分享失败');
            }
        })
            .catch(function (error) {
                console.log(error);
            });
    },
}





export { Projet_Global_Parameter }
